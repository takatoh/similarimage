#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# simimg
#


require 'similar_image'
require 'find'
require 'erb'
require 'pathname'
require 'optparse'


SCRIPT_VERSION = SimilarImage::VERSION

def main
  parser = OptionParser.new
  parser.banner = <<-EndBanner
Usage: #{parser.program_name} <subcommand> [options] [args]

Subcommands:
    index       Make index file.
    search      Search similar images.
    compare     Compare images.

Global Options:
  EndBanner
  parser.on('-v', '--version', 'Show version.') {
    puts "v#{SCRIPT_VERSION}"
    exit 0
  }
  parser.on('-h', '--help', 'Show this message.') {
    puts parser.help
    exit 0
  }

  subcommands = {}
  subcommands['index']  = MakeIndexCommand.new
  subcommands['search'] = SearchCommand.new
  subcommands['compare'] = CompareCommand.new
  begin
    parser.order!
    if ARGV.empty?
      $stderr.puts 'no sub-command given'
      $stderr.puts parser.help
      exit 1
    end
    name = ARGV.shift
    cmd = subcommands[name] or error "no such sub-command: #{name}"
  rescue OptionParser::ParseError => err
    $stderr.puts err.message
    $stderr.puts parser.help
    exit 1
  end
  begin
    cmd.parse(ARGV)
  rescue OptionParser::ParseError => err
    $stderr.puts err.message
    $stderr.puts cmd.help
    exit 1
  end
  cmd.exec(ARGV)
end

def error(msg)
  $stderr.puts "#{File.basename($0, '.*')}: error: #{msg}"
  exit 1
end


class Subcommand
  def parse(argv)
    @parser.parse! argv
  end

  def help
    @parser.help
  end
end


class MakeIndexCommand < Subcommand

  def initialize
    @options ={}
    @parser = OptionParser.new do |opt|
      opt.banner = "Usage: #{File.basename($0, '.*')} index [options] <imagedir>"
      opt.on('-a', '--append-to=FILE', 'Append to index file'){|v|
        @options[:append] = v
      }
      opt.on('-p', '--prefix=PATH', 'Add prefix path'){|v|
        @options[:prefix] = v
      }
      opt.on_tail('-h', '--help', 'Show this massage.'){
        print help
        exit 0
      }
    end
  end


  def exec(argv)
    if @options[:append]
      index = load_index(@options[:append])
      out = open(@options[:append], "a")
    else
      index = {}
      out = $stdout
    end

    dir = argv.shift
    if @options[:prefix]
      dir = File.join(@options[:prefix], dir)
    end

    Find.find(dir) do |f|
      f = Pathname.new(f)
      next unless f.file?
      fr = @options[:prefix] ? f.relative_path_from(@options[:prefix]) : f
      next if index[fr.to_s]
      $stderr.puts f.to_s
      hist = SimilarImage.color_histogram(f.to_s)
      out.puts "#{fr.to_s}  #{hist}"
    end

    out.close
  end

  def load_index(index_file)
    index = {}
    File.readlines(index_file).each do |l|
      k, v = l.split(/ +/)
      index[k] = SimilarImage::ColorHistogram.parse(v)
    end
    index
  end

end


class SearchCommand < Subcommand

  def initialize
    @options ={
      :num => 10
    }
    @parser = OptionParser.new do |opt|
      opt.banner = "Usage: #{File.basename($0, '.*')} search [options] <index> <image>"
      opt.on('-n=NUM', 'Top NUM of most similar images. defauot is 10.'){|v|
        @options[:num] = v.to_i
      }
      opt.on('-p', '--prefix=PATH', 'Add prefix to file path.'){|v|
        @options[:prefix] = v
      }
      opt.on('--html', 'Format to HTML.'){|v|
        @options[:html] = true
      }
      opt.on('--html-prefix=URL', 'Add prefix for URL.'){|v|
        @options[:html_prefix] = v
      }
      opt.on_tail('-h', '--help', 'Show this massage.'){
        print help
        exit 0
      }
    end
  end


  TEMPLATE = <<EOT
<html>
<head>
  <title>Similar images</title>
</head>

<body>
  <h1>Similar images</h1>
  <table>
    <tr><th>Score</th><th>Image</th><th>Path</th></tr>
    <tr>
      <td><b>ORIGINAL</b></td>
      <td><img src="<%= @orig_image_url %>" /></td>
      <td><a href="<%= @orig_image_url %>"><%= @orig_image_url %></a></td>
    </tr>
    <%- @result.each do |r| -%>
    <tr>
      <td><%= "%8.6f" % r[0] %></td>
      <td><img src="<%= r[1] %>" /></td>
      <td><a href="<%= r[1] %>"><%= r[1] %></a></td>
    </tr>
    <%- end -%>
  </table>
</body>
</html>
EOT


  def exec(argv)
    unless argv.size == 2
      print @parser.help
      exit 0
    end
    @index = load_index(ARGV.shift)
    @orig_image = ARGV.shift
    @result = search
    if @options[:prefix]
      @result.map!{|x| [x[0], File.join(@options[:prefix], x[1])] }
    end
    if @options[:html]
     if @options[:html_prefix]
        @orig_image_url = File.join(@options[:html_prefix], @orig_image)
        @result.map!{|r| [r[0], File.join(@options[:html_prefix], r[1])]}
      else
        @orig_image_url = @orig_image
      end
      script = ERB.new(TEMPLATE, nil, "-")
      script.run(binding)
    else
      puts ""
      puts "Original image: #{@orig_image}"
      puts "Similar images:"
      puts " Score     Path"
      puts "------------------------------------------------------------"
      @result.each do |i|
        path = @options[:html_prefix] ? File.join(@options[:html_prefix], i[1]) : i[1]
        printf("%8.6f  %s\n", i[0], path)
      end
    end
  end


  def load_index(index_file)
    index = {}
    File.readlines(index_file).each do |l|
      k, v = l.split(/ +/)
      index[k] = SimilarImage::ColorHistogram.parse(v)
    end
    index
  end

  def search
    image = Pathname.new(@orig_image)
    image_r = @options[:prefix] ? image.relative_path_from(@options[:prefix]) : image
    orig_hist = @index[image_r.to_s] || SimilarImage.color_histogram(image)
    res = []
    @index.each do |filename, hist|
      res << [orig_hist.intersection(hist), filename]
    end
    res.sort!{|a,b| b[0] <=> a[0]}
    n = @options[:num]
    if @index[image_r.to_s]
      res[0..n].delete_if{|a| a[1] == image_r.to_s}
    else
      res[0...n]
    end
  end

end


class CompareCommand < Subcommand

  def initialize
    @options ={}
    @parser = OptionParser.new do |opt|
      opt.banner = "Usage: #{File.basename($0, '.*')} compare [options] <file1> <file2>"
      opt.on('-i', '--index=FILE', 'print to index file.'){|v| @options[:index] = v}
      opt.on_tail('-h', '--help', 'Show this massage.'){
        print help
        exit 0
      }
    end
  end

  def exec(argv)
    if @options[:index]
      index = {}
      File.readlines(@options[:index]).each do |l|
        k, v = l.split(/ +/)
        index[k] = SimilarImage::ColorHistogram.parse(v)
      end
      hist_1 = index[ARGV.shift]
      hist_2 = index[ARGV.shift]
    else
      hist_1 = SimilarImage.color_histogram(ARGV.shift)
      hist_2 = SimilarImage.color_histogram(ARGV.shift)
    end
    puts hist_1.intersection(hist_2)
  end

end   # of class CompareCommand


main
